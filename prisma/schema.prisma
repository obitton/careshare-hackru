generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Senior {
  id                   Int                        @id @default(autoincrement())
  first_name           String
  last_name            String
  phone_number         String?
  email                String?
  street_address       String?
  city                 String?
  state                String?
  zip_code             String?
  is_active            Boolean?
  created_at           DateTime?                  @db.Timestamptz
  updated_at           DateTime?                  @db.Timestamptz
  emergency_contacts   EmergencyContact[]
  appointments         Appointment[]
  call_attempts        CallAttempt[]
  inbound_conversations InboundConversation[]
  accommodations       SeniorAccommodation[]
  preferred_volunteers SeniorPreferredVolunteer[]

  @@map("seniors")
}

model Volunteer {
  id                      Int                        @id @default(autoincrement())
  first_name              String
  last_name               String
  phone_number            String?
  email                   String
  bio                     String?
  background_check_status String?
  availability_schedule   Json?
  is_active               Boolean?
  created_at              DateTime?                  @db.Timestamptz
  zip_code                String?
  appointments            Appointment[]
  call_attempts           CallAttempt[]
  conversation_calls      ConversationCall[]
  skills                  VolunteerSkill[]
  preferred_by_seniors    SeniorPreferredVolunteer[]

  @@map("volunteers")
}

model Appointment {
  id                      Int        @id @default(autoincrement())
  senior_id               Int
  volunteer_id            Int?
  appointment_datetime    DateTime   @db.Timestamptz
  duration_minutes        Int?
  location                String?
  status                  String
  notes_for_volunteer     String?
  feedback_from_senior    String?
  feedback_from_volunteer String?
  created_at              DateTime?  @db.Timestamptz
  senior                  Senior     @relation(fields: [senior_id], references: [id])
  volunteer               Volunteer? @relation(fields: [volunteer_id], references: [id])
  inbound_conversations   InboundConversation[]

  @@index([senior_id])
  @@index([volunteer_id])
  @@map("appointments")
}

model EmergencyContact {
  id           Int    @id @default(autoincrement())
  senior_id    Int
  full_name    String
  phone_number String
  relationship String
  senior       Senior @relation(fields: [senior_id], references: [id])

  @@index([senior_id])
  @@map("emergency_contacts")
}

model CallAttempt {
  id           Int       @id @default(autoincrement())
  senior_id    Int
  volunteer_id Int
  outcome      String
  notes        String?
  created_at   DateTime? @db.Timestamptz
  senior       Senior    @relation(fields: [senior_id], references: [id])
  volunteer    Volunteer @relation(fields: [volunteer_id], references: [id])

  @@index([senior_id])
  @@index([volunteer_id])
  @@map("call_attempts")
}

model InboundConversation {
  id                       Int                 @id @default(autoincrement())
  senior_id                Int?
  caller_phone_number      String?
  request_details          String?
  matched_skill            String?
  nearby_volunteers        Json?
  status                   String?
  scheduled_appointment_id Int?                @unique
  created_at               DateTime?           @db.Timestamptz
  updated_at               DateTime?           @db.Timestamptz
  senior                   Senior?             @relation(fields: [senior_id], references: [id])
  scheduled_appointment    Appointment?        @relation(fields: [scheduled_appointment_id], references: [id])
  conversation_calls       ConversationCall[]

  @@index([senior_id])
  @@map("inbound_conversations")
}

model ConversationCall {
  id              Int                 @id @default(autoincrement())
  conversation_id Int
  volunteer_id    Int
  outcome         String
  notes           String?
  created_at      DateTime?           @db.Timestamptz
  call_sid        String?
  role            String?
  conversation    InboundConversation @relation(fields: [conversation_id], references: [id])
  volunteer       Volunteer           @relation(fields: [volunteer_id], references: [id])

  @@index([conversation_id])
  @@index([volunteer_id])
  @@map("conversation_calls")
}

model Accommodation {
  id          BigInt                @id @default(autoincrement())
  name        String
  description String?
  seniors     SeniorAccommodation[]

  @@map("accommodations")
}

model SeniorAccommodation {
  senior_id        Int
  accommodation_id BigInt
  senior           Senior        @relation(fields: [senior_id], references: [id])
  accommodation    Accommodation @relation(fields: [accommodation_id], references: [id])

  @@id([senior_id, accommodation_id])
  @@map("senior_accommodations")
}

model SeniorPreferredVolunteer {
  senior_id    Int
  volunteer_id Int
  notes        String?
  senior       Senior    @relation(fields: [senior_id], references: [id])
  volunteer    Volunteer @relation(fields: [volunteer_id], references: [id])

  @@id([senior_id, volunteer_id])
  @@map("senior_preferred_volunteers")
}

model Skill {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  volunteers VolunteerSkill[]

  @@map("skills")
}

model VolunteerSkill {
  volunteer_id Int
  skill_id     Int
  volunteer    Volunteer @relation(fields: [volunteer_id], references: [id])
  skill        Skill     @relation(fields: [skill_id], references: [id])

  @@id([volunteer_id, skill_id])
  @@map("volunteer_skills")
}
