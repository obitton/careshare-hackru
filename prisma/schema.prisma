generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Senior {
  id              Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  phone_number    String?
  email           String?
  street_address  String?
  city            String?
  state           String?
  zip_code        String?
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  emergency       EmergencyContact[]
  appointments    Appointment[]
  call_attempts   CallAttempt[]
  inbound_conversations InboundConversation[]
}

model Volunteer {
  id                     Int       @id @default(autoincrement())
  first_name             String
  last_name              String
  phone_number           String?
  email                  String
  bio                    String?
  background_check_status String    @default("Not Started")
  availability_schedule  Json?
  is_active              Boolean   @default(true)
  created_at             DateTime  @default(now())
  appointments           Appointment[]
  call_attempts          CallAttempt[]
  conversation_calls     ConversationCall[]
}

model Appointment {
  id                    Int       @id @default(autoincrement())
  senior_id             Int
  volunteer_id          Int?
  appointment_datetime  DateTime
  duration_minutes      Int?
  location              String?
  status                String
  notes_for_volunteer   String?
  feedback_from_senior  String?
  feedback_from_volunteer String?
  created_at            DateTime @default(now())
  senior                Senior   @relation(fields: [senior_id], references: [id])
  volunteer             Volunteer? @relation(fields: [volunteer_id], references: [id])
  inbound_conversation  InboundConversation?
}

model EmergencyContact {
  id          Int     @id @default(autoincrement())
  senior_id   Int
  full_name   String
  phone_number String
  relationship String
  senior      Senior @relation(fields: [senior_id], references: [id])
}

model CallAttempt {
  id           Int      @id @default(autoincrement())
  senior_id    Int
  volunteer_id Int
  outcome      String
  notes        String?
  created_at   DateTime @default(now())

  senior    Senior    @relation(fields: [senior_id], references: [id], onDelete: Cascade)
  volunteer Volunteer @relation(fields: [volunteer_id], references: [id], onDelete: Cascade)
}

model InboundConversation {
  id                       Int      @id @default(autoincrement())
  senior_id                Int?
  caller_phone_number      String?
  request_details          String?
  matched_skill            String?
  nearby_volunteers        Json?
  status                   String   @default("OPEN")
  scheduled_appointment_id Int?     @unique
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now()) @updatedAt

  senior                Senior?           @relation(fields: [senior_id], references: [id], onDelete: SetNull)
  scheduled_appointment Appointment?      @relation(fields: [scheduled_appointment_id], references: [id], onDelete: SetNull)
  conversation_calls    ConversationCall[]
}

model ConversationCall {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  volunteer_id    Int
  outcome         String
  notes           String?
  created_at      DateTime @default(now())
  call_sid        String?
  role            String? // VOLUNTEER | SENIOR_CALLBACK

  conversation InboundConversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  volunteer    Volunteer           @relation(fields: [volunteer_id], references: [id], onDelete: Cascade)
}
